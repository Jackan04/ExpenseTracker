@using ExpenseTracker.Services
@using ExpenseTracker.Models
@using ExpenseTracker.Services
@page "/"
@inject FirebaseService Firebase
@inject FirebaseCategoryService FirebaseCategory

<h3 class="page-title">All Expenses</h3>

<table class="table table-striped">
    <thead>
    <tr>
        <th>Date</th>
        <th>Title</th>
        <th>Amount (SEK)</th>
        <th>Category</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var expense in expenses)
    {
        <tr>
            <td>@expense.CreatedAt.ToShortDateString()</td>
            <td>@expense.Title</td>
            <td>@expense.Amount</td>
            <td>@expense.Category</td>
        </tr>
    }
    </tbody>
</table>
<h3>Categories</h3>
<table class="table table-striped">
    <thead>
    <tr>
        <th>Name</th>
        <th>Date</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var category in categories)
    {
        <tr>
            <td>@category.CreatedAt.ToShortDateString()</td>
            <td>@category.Name</td>
        </tr>
    }
    </tbody>
</table>

<EditForm Model="newExpense" OnValidSubmit="AddExpense">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Title</label>
        <InputText class="form-control" @bind-Value="newExpense.Title" />
    </div>

    <div class="form-group">
        <label>Amount</label>
        <InputNumber class="form-control" @bind-Value="newExpense.Amount" />
    </div>
    
    <div class="form-group">
        <label>Category</label>
        <InputSelect class="form-control" @bind-Value="newExpense.Category">
            @foreach (var category in categories)
            {
                <option>@category.Name</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary mt-2">Add Expense</button>
</EditForm>

@code {
    
    private List<Expense> expenses = new();
    private List<Category> categories = new();

    protected override async Task OnInitializedAsync()
    {
        expenses = await Firebase.GetExpensesAsync();
        categories = await FirebaseCategory.GetCategoriesAsync();
    }
    
    private Expense newExpense = new();

    private async Task AddExpense()
    {
        newExpense.CreatedAt = DateTime.Now;
        await Firebase.AddExpenseAsync(newExpense);

        expenses.Add(new Expense {
            Title = newExpense.Title,
            Amount = newExpense.Amount,
            Category = newExpense.Category,
            CreatedAt = newExpense.CreatedAt
        });
        
        newExpense = new(); // reset form
    }
}

@using ExpenseTracker.Models
@using ExpenseTracker.Services
@page "/"
@inject FirebaseService Firebase

<h3 class="page-title">All Expenses</h3>

<ul>
    @foreach (var expense in expenses)
    {
        <li>@expense.CreatedAt.ToShortDateString() - @expense.Title - $@expense.Amount - @expense.Category</li>
    }
</ul>

<EditForm Model="newExpense" OnValidSubmit="AddExpense">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Title</label>
        <InputText class="form-control" @bind-Value="newExpense.Title" />
    </div>

    <div class="form-group">
        <label>Amount</label>
        <InputNumber class="form-control" @bind-Value="newExpense.Amount" />
    </div>

    <div class="form-group">
        <label>Category</label>
        <InputSelect class="form-control" @bind-Value="newExpense.Category">
            <option value="">Select category</option>
            <option>Food</option>
            <option>Transport</option>
            <option>Entertainment</option>
            <option>Other</option>
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary mt-2">Add Expense</button>
</EditForm>

@code {
    
    private List<Expense> expenses = new();

    protected override async Task OnInitializedAsync()
    {
        expenses = await Firebase.GetExpensesAsync();
    }
    private Expense newExpense = new();

    private async Task AddExpense()
    {
        newExpense.CreatedAt = DateTime.Now;
        await Firebase.AddExpenseAsync(newExpense);

        expenses.Add(new Expense {
            Title = newExpense.Title,
            Amount = newExpense.Amount,
            Category = newExpense.Category,
            CreatedAt = newExpense.CreatedAt
        });
        
        newExpense = new(); // reset form
    }
}
